// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/gossip.proto

#ifndef PROTOBUF_cockroach_2fproto_2fgossip_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fproto_2fgossip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cockroach/proto/config.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cockroach_2fproto_2fgossip_2eproto();
void protobuf_AssignDesc_cockroach_2fproto_2fgossip_2eproto();
void protobuf_ShutdownFile_cockroach_2fproto_2fgossip_2eproto();

class GossipRequest;
class GossipResponse;

// ===================================================================

class GossipRequest : public ::google::protobuf::Message {
 public:
  GossipRequest();
  virtual ~GossipRequest();

  GossipRequest(const GossipRequest& from);

  inline GossipRequest& operator=(const GossipRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GossipRequest& default_instance();

  void Swap(GossipRequest* other);

  // implements Message ----------------------------------------------

  GossipRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GossipRequest& from);
  void MergeFrom(const GossipRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 node_id = 1;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);

  // optional .cockroach.proto.Addr addr = 2;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 2;
  inline const ::cockroach::proto::Addr& addr() const;
  inline ::cockroach::proto::Addr* mutable_addr();
  inline ::cockroach::proto::Addr* release_addr();
  inline void set_allocated_addr(::cockroach::proto::Addr* addr);

  // optional .cockroach.proto.Addr l_addr = 3;
  inline bool has_l_addr() const;
  inline void clear_l_addr();
  static const int kLAddrFieldNumber = 3;
  inline const ::cockroach::proto::Addr& l_addr() const;
  inline ::cockroach::proto::Addr* mutable_l_addr();
  inline ::cockroach::proto::Addr* release_l_addr();
  inline void set_allocated_l_addr(::cockroach::proto::Addr* l_addr);

  // optional int64 max_seq = 4;
  inline bool has_max_seq() const;
  inline void clear_max_seq();
  static const int kMaxSeqFieldNumber = 4;
  inline ::google::protobuf::int64 max_seq() const;
  inline void set_max_seq(::google::protobuf::int64 value);

  // optional bytes delta = 5;
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 5;
  inline const ::std::string& delta() const;
  inline void set_delta(const ::std::string& value);
  inline void set_delta(const char* value);
  inline void set_delta(const void* value, size_t size);
  inline ::std::string* mutable_delta();
  inline ::std::string* release_delta();
  inline void set_allocated_delta(::std::string* delta);

  // @@protoc_insertion_point(class_scope:cockroach.proto.GossipRequest)
 private:
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_l_addr();
  inline void clear_has_l_addr();
  inline void set_has_max_seq();
  inline void clear_has_max_seq();
  inline void set_has_delta();
  inline void clear_has_delta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Addr* addr_;
  ::cockroach::proto::Addr* l_addr_;
  ::google::protobuf::int64 max_seq_;
  ::std::string* delta_;
  ::google::protobuf::int32 node_id_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fgossip_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fgossip_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fgossip_2eproto();

  void InitAsDefaultInstance();
  static GossipRequest* default_instance_;
};
// -------------------------------------------------------------------

class GossipResponse : public ::google::protobuf::Message {
 public:
  GossipResponse();
  virtual ~GossipResponse();

  GossipResponse(const GossipResponse& from);

  inline GossipResponse& operator=(const GossipResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GossipResponse& default_instance();

  void Swap(GossipResponse* other);

  // implements Message ----------------------------------------------

  GossipResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GossipResponse& from);
  void MergeFrom(const GossipResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes delta = 1;
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 1;
  inline const ::std::string& delta() const;
  inline void set_delta(const ::std::string& value);
  inline void set_delta(const char* value);
  inline void set_delta(const void* value, size_t size);
  inline ::std::string* mutable_delta();
  inline ::std::string* release_delta();
  inline void set_allocated_delta(::std::string* delta);

  // optional .cockroach.proto.Addr alternate = 2;
  inline bool has_alternate() const;
  inline void clear_alternate();
  static const int kAlternateFieldNumber = 2;
  inline const ::cockroach::proto::Addr& alternate() const;
  inline ::cockroach::proto::Addr* mutable_alternate();
  inline ::cockroach::proto::Addr* release_alternate();
  inline void set_allocated_alternate(::cockroach::proto::Addr* alternate);

  // @@protoc_insertion_point(class_scope:cockroach.proto.GossipResponse)
 private:
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_alternate();
  inline void clear_has_alternate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* delta_;
  ::cockroach::proto::Addr* alternate_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fgossip_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fgossip_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fgossip_2eproto();

  void InitAsDefaultInstance();
  static GossipResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GossipRequest

// optional int32 node_id = 1;
inline bool GossipRequest::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GossipRequest::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GossipRequest::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GossipRequest::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 GossipRequest::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GossipRequest.node_id)
  return node_id_;
}
inline void GossipRequest::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.GossipRequest.node_id)
}

// optional .cockroach.proto.Addr addr = 2;
inline bool GossipRequest::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GossipRequest::set_has_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GossipRequest::clear_has_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GossipRequest::clear_addr() {
  if (addr_ != NULL) addr_->::cockroach::proto::Addr::Clear();
  clear_has_addr();
}
inline const ::cockroach::proto::Addr& GossipRequest::addr() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GossipRequest.addr)
  return addr_ != NULL ? *addr_ : *default_instance_->addr_;
}
inline ::cockroach::proto::Addr* GossipRequest::mutable_addr() {
  set_has_addr();
  if (addr_ == NULL) addr_ = new ::cockroach::proto::Addr;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.GossipRequest.addr)
  return addr_;
}
inline ::cockroach::proto::Addr* GossipRequest::release_addr() {
  clear_has_addr();
  ::cockroach::proto::Addr* temp = addr_;
  addr_ = NULL;
  return temp;
}
inline void GossipRequest::set_allocated_addr(::cockroach::proto::Addr* addr) {
  delete addr_;
  addr_ = addr;
  if (addr) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.GossipRequest.addr)
}

// optional .cockroach.proto.Addr l_addr = 3;
inline bool GossipRequest::has_l_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GossipRequest::set_has_l_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GossipRequest::clear_has_l_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GossipRequest::clear_l_addr() {
  if (l_addr_ != NULL) l_addr_->::cockroach::proto::Addr::Clear();
  clear_has_l_addr();
}
inline const ::cockroach::proto::Addr& GossipRequest::l_addr() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GossipRequest.l_addr)
  return l_addr_ != NULL ? *l_addr_ : *default_instance_->l_addr_;
}
inline ::cockroach::proto::Addr* GossipRequest::mutable_l_addr() {
  set_has_l_addr();
  if (l_addr_ == NULL) l_addr_ = new ::cockroach::proto::Addr;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.GossipRequest.l_addr)
  return l_addr_;
}
inline ::cockroach::proto::Addr* GossipRequest::release_l_addr() {
  clear_has_l_addr();
  ::cockroach::proto::Addr* temp = l_addr_;
  l_addr_ = NULL;
  return temp;
}
inline void GossipRequest::set_allocated_l_addr(::cockroach::proto::Addr* l_addr) {
  delete l_addr_;
  l_addr_ = l_addr;
  if (l_addr) {
    set_has_l_addr();
  } else {
    clear_has_l_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.GossipRequest.l_addr)
}

// optional int64 max_seq = 4;
inline bool GossipRequest::has_max_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GossipRequest::set_has_max_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GossipRequest::clear_has_max_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GossipRequest::clear_max_seq() {
  max_seq_ = GOOGLE_LONGLONG(0);
  clear_has_max_seq();
}
inline ::google::protobuf::int64 GossipRequest::max_seq() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GossipRequest.max_seq)
  return max_seq_;
}
inline void GossipRequest::set_max_seq(::google::protobuf::int64 value) {
  set_has_max_seq();
  max_seq_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.GossipRequest.max_seq)
}

// optional bytes delta = 5;
inline bool GossipRequest::has_delta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GossipRequest::set_has_delta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GossipRequest::clear_has_delta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GossipRequest::clear_delta() {
  if (delta_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delta_->clear();
  }
  clear_has_delta();
}
inline const ::std::string& GossipRequest::delta() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GossipRequest.delta)
  return *delta_;
}
inline void GossipRequest::set_delta(const ::std::string& value) {
  set_has_delta();
  if (delta_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delta_ = new ::std::string;
  }
  delta_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.GossipRequest.delta)
}
inline void GossipRequest::set_delta(const char* value) {
  set_has_delta();
  if (delta_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delta_ = new ::std::string;
  }
  delta_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.GossipRequest.delta)
}
inline void GossipRequest::set_delta(const void* value, size_t size) {
  set_has_delta();
  if (delta_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delta_ = new ::std::string;
  }
  delta_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.GossipRequest.delta)
}
inline ::std::string* GossipRequest::mutable_delta() {
  set_has_delta();
  if (delta_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delta_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.GossipRequest.delta)
  return delta_;
}
inline ::std::string* GossipRequest::release_delta() {
  clear_has_delta();
  if (delta_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = delta_;
    delta_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GossipRequest::set_allocated_delta(::std::string* delta) {
  if (delta_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete delta_;
  }
  if (delta) {
    set_has_delta();
    delta_ = delta;
  } else {
    clear_has_delta();
    delta_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.GossipRequest.delta)
}

// -------------------------------------------------------------------

// GossipResponse

// optional bytes delta = 1;
inline bool GossipResponse::has_delta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GossipResponse::set_has_delta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GossipResponse::clear_has_delta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GossipResponse::clear_delta() {
  if (delta_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delta_->clear();
  }
  clear_has_delta();
}
inline const ::std::string& GossipResponse::delta() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GossipResponse.delta)
  return *delta_;
}
inline void GossipResponse::set_delta(const ::std::string& value) {
  set_has_delta();
  if (delta_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delta_ = new ::std::string;
  }
  delta_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.GossipResponse.delta)
}
inline void GossipResponse::set_delta(const char* value) {
  set_has_delta();
  if (delta_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delta_ = new ::std::string;
  }
  delta_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.GossipResponse.delta)
}
inline void GossipResponse::set_delta(const void* value, size_t size) {
  set_has_delta();
  if (delta_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delta_ = new ::std::string;
  }
  delta_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.GossipResponse.delta)
}
inline ::std::string* GossipResponse::mutable_delta() {
  set_has_delta();
  if (delta_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delta_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.GossipResponse.delta)
  return delta_;
}
inline ::std::string* GossipResponse::release_delta() {
  clear_has_delta();
  if (delta_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = delta_;
    delta_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GossipResponse::set_allocated_delta(::std::string* delta) {
  if (delta_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete delta_;
  }
  if (delta) {
    set_has_delta();
    delta_ = delta;
  } else {
    clear_has_delta();
    delta_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.GossipResponse.delta)
}

// optional .cockroach.proto.Addr alternate = 2;
inline bool GossipResponse::has_alternate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GossipResponse::set_has_alternate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GossipResponse::clear_has_alternate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GossipResponse::clear_alternate() {
  if (alternate_ != NULL) alternate_->::cockroach::proto::Addr::Clear();
  clear_has_alternate();
}
inline const ::cockroach::proto::Addr& GossipResponse::alternate() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GossipResponse.alternate)
  return alternate_ != NULL ? *alternate_ : *default_instance_->alternate_;
}
inline ::cockroach::proto::Addr* GossipResponse::mutable_alternate() {
  set_has_alternate();
  if (alternate_ == NULL) alternate_ = new ::cockroach::proto::Addr;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.GossipResponse.alternate)
  return alternate_;
}
inline ::cockroach::proto::Addr* GossipResponse::release_alternate() {
  clear_has_alternate();
  ::cockroach::proto::Addr* temp = alternate_;
  alternate_ = NULL;
  return temp;
}
inline void GossipResponse::set_allocated_alternate(::cockroach::proto::Addr* alternate) {
  delete alternate_;
  alternate_ = alternate;
  if (alternate) {
    set_has_alternate();
  } else {
    clear_has_alternate();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.GossipResponse.alternate)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fproto_2fgossip_2eproto__INCLUDED
