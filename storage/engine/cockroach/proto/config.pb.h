// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/config.proto

#ifndef PROTOBUF_cockroach_2fproto_2fconfig_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fproto_2fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

class Attributes;
class Replica;
class RangeDescriptor;
class GCPolicy;
class AcctConfig;
class PermConfig;
class ZoneConfig;
class RangeTree;
class RangeTreeNode;
class Addr;
class StoreCapacity;
class NodeDescriptor;
class StoreDescriptor;

// ===================================================================

class Attributes : public ::google::protobuf::Message {
 public:
  Attributes();
  virtual ~Attributes();

  Attributes(const Attributes& from);

  inline Attributes& operator=(const Attributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attributes& default_instance();

  void Swap(Attributes* other);

  // implements Message ----------------------------------------------

  Attributes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attributes& from);
  void MergeFrom(const Attributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string attrs = 1;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 1;
  inline const ::std::string& attrs(int index) const;
  inline ::std::string* mutable_attrs(int index);
  inline void set_attrs(int index, const ::std::string& value);
  inline void set_attrs(int index, const char* value);
  inline void set_attrs(int index, const char* value, size_t size);
  inline ::std::string* add_attrs();
  inline void add_attrs(const ::std::string& value);
  inline void add_attrs(const char* value);
  inline void add_attrs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attrs();

  // @@protoc_insertion_point(class_scope:cockroach.proto.Attributes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attrs_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static Attributes* default_instance_;
};
// -------------------------------------------------------------------

class Replica : public ::google::protobuf::Message {
 public:
  Replica();
  virtual ~Replica();

  Replica(const Replica& from);

  inline Replica& operator=(const Replica& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Replica& default_instance();

  void Swap(Replica* other);

  // implements Message ----------------------------------------------

  Replica* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Replica& from);
  void MergeFrom(const Replica& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 node_id = 1;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);

  // optional int32 store_id = 2;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 2;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // optional .cockroach.proto.Attributes attrs = 3;
  inline bool has_attrs() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 3;
  inline const ::cockroach::proto::Attributes& attrs() const;
  inline ::cockroach::proto::Attributes* mutable_attrs();
  inline ::cockroach::proto::Attributes* release_attrs();
  inline void set_allocated_attrs(::cockroach::proto::Attributes* attrs);

  // @@protoc_insertion_point(class_scope:cockroach.proto.Replica)
 private:
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_attrs();
  inline void clear_has_attrs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 store_id_;
  ::cockroach::proto::Attributes* attrs_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static Replica* default_instance_;
};
// -------------------------------------------------------------------

class RangeDescriptor : public ::google::protobuf::Message {
 public:
  RangeDescriptor();
  virtual ~RangeDescriptor();

  RangeDescriptor(const RangeDescriptor& from);

  inline RangeDescriptor& operator=(const RangeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeDescriptor& default_instance();

  void Swap(RangeDescriptor* other);

  // implements Message ----------------------------------------------

  RangeDescriptor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeDescriptor& from);
  void MergeFrom(const RangeDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 raft_id = 1;
  inline bool has_raft_id() const;
  inline void clear_raft_id();
  static const int kRaftIdFieldNumber = 1;
  inline ::google::protobuf::int64 raft_id() const;
  inline void set_raft_id(::google::protobuf::int64 value);

  // optional bytes start_key = 2;
  inline bool has_start_key() const;
  inline void clear_start_key();
  static const int kStartKeyFieldNumber = 2;
  inline const ::std::string& start_key() const;
  inline void set_start_key(const ::std::string& value);
  inline void set_start_key(const char* value);
  inline void set_start_key(const void* value, size_t size);
  inline ::std::string* mutable_start_key();
  inline ::std::string* release_start_key();
  inline void set_allocated_start_key(::std::string* start_key);

  // optional bytes end_key = 3;
  inline bool has_end_key() const;
  inline void clear_end_key();
  static const int kEndKeyFieldNumber = 3;
  inline const ::std::string& end_key() const;
  inline void set_end_key(const ::std::string& value);
  inline void set_end_key(const char* value);
  inline void set_end_key(const void* value, size_t size);
  inline ::std::string* mutable_end_key();
  inline ::std::string* release_end_key();
  inline void set_allocated_end_key(::std::string* end_key);

  // repeated .cockroach.proto.Replica replicas = 4;
  inline int replicas_size() const;
  inline void clear_replicas();
  static const int kReplicasFieldNumber = 4;
  inline const ::cockroach::proto::Replica& replicas(int index) const;
  inline ::cockroach::proto::Replica* mutable_replicas(int index);
  inline ::cockroach::proto::Replica* add_replicas();
  inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica >&
      replicas() const;
  inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica >*
      mutable_replicas();

  // @@protoc_insertion_point(class_scope:cockroach.proto.RangeDescriptor)
 private:
  inline void set_has_raft_id();
  inline void clear_has_raft_id();
  inline void set_has_start_key();
  inline void clear_has_start_key();
  inline void set_has_end_key();
  inline void clear_has_end_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 raft_id_;
  ::std::string* start_key_;
  ::std::string* end_key_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica > replicas_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static RangeDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class GCPolicy : public ::google::protobuf::Message {
 public:
  GCPolicy();
  virtual ~GCPolicy();

  GCPolicy(const GCPolicy& from);

  inline GCPolicy& operator=(const GCPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCPolicy& default_instance();

  void Swap(GCPolicy* other);

  // implements Message ----------------------------------------------

  GCPolicy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCPolicy& from);
  void MergeFrom(const GCPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ttl_seconds = 1;
  inline bool has_ttl_seconds() const;
  inline void clear_ttl_seconds();
  static const int kTtlSecondsFieldNumber = 1;
  inline ::google::protobuf::int32 ttl_seconds() const;
  inline void set_ttl_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.GCPolicy)
 private:
  inline void set_has_ttl_seconds();
  inline void clear_has_ttl_seconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ttl_seconds_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static GCPolicy* default_instance_;
};
// -------------------------------------------------------------------

class AcctConfig : public ::google::protobuf::Message {
 public:
  AcctConfig();
  virtual ~AcctConfig();

  AcctConfig(const AcctConfig& from);

  inline AcctConfig& operator=(const AcctConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcctConfig& default_instance();

  void Swap(AcctConfig* other);

  // implements Message ----------------------------------------------

  AcctConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcctConfig& from);
  void MergeFrom(const AcctConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cluster_id = 1;
  inline bool has_cluster_id() const;
  inline void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  inline const ::std::string& cluster_id() const;
  inline void set_cluster_id(const ::std::string& value);
  inline void set_cluster_id(const char* value);
  inline void set_cluster_id(const char* value, size_t size);
  inline ::std::string* mutable_cluster_id();
  inline ::std::string* release_cluster_id();
  inline void set_allocated_cluster_id(::std::string* cluster_id);

  // @@protoc_insertion_point(class_scope:cockroach.proto.AcctConfig)
 private:
  inline void set_has_cluster_id();
  inline void clear_has_cluster_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cluster_id_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static AcctConfig* default_instance_;
};
// -------------------------------------------------------------------

class PermConfig : public ::google::protobuf::Message {
 public:
  PermConfig();
  virtual ~PermConfig();

  PermConfig(const PermConfig& from);

  inline PermConfig& operator=(const PermConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PermConfig& default_instance();

  void Swap(PermConfig* other);

  // implements Message ----------------------------------------------

  PermConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PermConfig& from);
  void MergeFrom(const PermConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string read = 1;
  inline int read_size() const;
  inline void clear_read();
  static const int kReadFieldNumber = 1;
  inline const ::std::string& read(int index) const;
  inline ::std::string* mutable_read(int index);
  inline void set_read(int index, const ::std::string& value);
  inline void set_read(int index, const char* value);
  inline void set_read(int index, const char* value, size_t size);
  inline ::std::string* add_read();
  inline void add_read(const ::std::string& value);
  inline void add_read(const char* value);
  inline void add_read(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& read() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_read();

  // repeated string write = 2;
  inline int write_size() const;
  inline void clear_write();
  static const int kWriteFieldNumber = 2;
  inline const ::std::string& write(int index) const;
  inline ::std::string* mutable_write(int index);
  inline void set_write(int index, const ::std::string& value);
  inline void set_write(int index, const char* value);
  inline void set_write(int index, const char* value, size_t size);
  inline ::std::string* add_write();
  inline void add_write(const ::std::string& value);
  inline void add_write(const char* value);
  inline void add_write(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& write() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_write();

  // @@protoc_insertion_point(class_scope:cockroach.proto.PermConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> read_;
  ::google::protobuf::RepeatedPtrField< ::std::string> write_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static PermConfig* default_instance_;
};
// -------------------------------------------------------------------

class ZoneConfig : public ::google::protobuf::Message {
 public:
  ZoneConfig();
  virtual ~ZoneConfig();

  ZoneConfig(const ZoneConfig& from);

  inline ZoneConfig& operator=(const ZoneConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneConfig& default_instance();

  void Swap(ZoneConfig* other);

  // implements Message ----------------------------------------------

  ZoneConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneConfig& from);
  void MergeFrom(const ZoneConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cockroach.proto.Attributes replica_attrs = 1;
  inline int replica_attrs_size() const;
  inline void clear_replica_attrs();
  static const int kReplicaAttrsFieldNumber = 1;
  inline const ::cockroach::proto::Attributes& replica_attrs(int index) const;
  inline ::cockroach::proto::Attributes* mutable_replica_attrs(int index);
  inline ::cockroach::proto::Attributes* add_replica_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Attributes >&
      replica_attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Attributes >*
      mutable_replica_attrs();

  // optional int64 range_min_bytes = 2;
  inline bool has_range_min_bytes() const;
  inline void clear_range_min_bytes();
  static const int kRangeMinBytesFieldNumber = 2;
  inline ::google::protobuf::int64 range_min_bytes() const;
  inline void set_range_min_bytes(::google::protobuf::int64 value);

  // optional int64 range_max_bytes = 3;
  inline bool has_range_max_bytes() const;
  inline void clear_range_max_bytes();
  static const int kRangeMaxBytesFieldNumber = 3;
  inline ::google::protobuf::int64 range_max_bytes() const;
  inline void set_range_max_bytes(::google::protobuf::int64 value);

  // optional .cockroach.proto.GCPolicy gc = 4;
  inline bool has_gc() const;
  inline void clear_gc();
  static const int kGcFieldNumber = 4;
  inline const ::cockroach::proto::GCPolicy& gc() const;
  inline ::cockroach::proto::GCPolicy* mutable_gc();
  inline ::cockroach::proto::GCPolicy* release_gc();
  inline void set_allocated_gc(::cockroach::proto::GCPolicy* gc);

  // @@protoc_insertion_point(class_scope:cockroach.proto.ZoneConfig)
 private:
  inline void set_has_range_min_bytes();
  inline void clear_has_range_min_bytes();
  inline void set_has_range_max_bytes();
  inline void clear_has_range_max_bytes();
  inline void set_has_gc();
  inline void clear_has_gc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Attributes > replica_attrs_;
  ::google::protobuf::int64 range_min_bytes_;
  ::google::protobuf::int64 range_max_bytes_;
  ::cockroach::proto::GCPolicy* gc_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static ZoneConfig* default_instance_;
};
// -------------------------------------------------------------------

class RangeTree : public ::google::protobuf::Message {
 public:
  RangeTree();
  virtual ~RangeTree();

  RangeTree(const RangeTree& from);

  inline RangeTree& operator=(const RangeTree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeTree& default_instance();

  void Swap(RangeTree* other);

  // implements Message ----------------------------------------------

  RangeTree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeTree& from);
  void MergeFrom(const RangeTree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes root_key = 1;
  inline bool has_root_key() const;
  inline void clear_root_key();
  static const int kRootKeyFieldNumber = 1;
  inline const ::std::string& root_key() const;
  inline void set_root_key(const ::std::string& value);
  inline void set_root_key(const char* value);
  inline void set_root_key(const void* value, size_t size);
  inline ::std::string* mutable_root_key();
  inline ::std::string* release_root_key();
  inline void set_allocated_root_key(::std::string* root_key);

  // @@protoc_insertion_point(class_scope:cockroach.proto.RangeTree)
 private:
  inline void set_has_root_key();
  inline void clear_has_root_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* root_key_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static RangeTree* default_instance_;
};
// -------------------------------------------------------------------

class RangeTreeNode : public ::google::protobuf::Message {
 public:
  RangeTreeNode();
  virtual ~RangeTreeNode();

  RangeTreeNode(const RangeTreeNode& from);

  inline RangeTreeNode& operator=(const RangeTreeNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeTreeNode& default_instance();

  void Swap(RangeTreeNode* other);

  // implements Message ----------------------------------------------

  RangeTreeNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeTreeNode& from);
  void MergeFrom(const RangeTreeNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bool black = 2;
  inline bool has_black() const;
  inline void clear_black();
  static const int kBlackFieldNumber = 2;
  inline bool black() const;
  inline void set_black(bool value);

  // optional bytes parent_key = 3;
  inline bool has_parent_key() const;
  inline void clear_parent_key();
  static const int kParentKeyFieldNumber = 3;
  inline const ::std::string& parent_key() const;
  inline void set_parent_key(const ::std::string& value);
  inline void set_parent_key(const char* value);
  inline void set_parent_key(const void* value, size_t size);
  inline ::std::string* mutable_parent_key();
  inline ::std::string* release_parent_key();
  inline void set_allocated_parent_key(::std::string* parent_key);

  // optional bytes left_key = 4;
  inline bool has_left_key() const;
  inline void clear_left_key();
  static const int kLeftKeyFieldNumber = 4;
  inline const ::std::string& left_key() const;
  inline void set_left_key(const ::std::string& value);
  inline void set_left_key(const char* value);
  inline void set_left_key(const void* value, size_t size);
  inline ::std::string* mutable_left_key();
  inline ::std::string* release_left_key();
  inline void set_allocated_left_key(::std::string* left_key);

  // optional bytes right_key = 5;
  inline bool has_right_key() const;
  inline void clear_right_key();
  static const int kRightKeyFieldNumber = 5;
  inline const ::std::string& right_key() const;
  inline void set_right_key(const ::std::string& value);
  inline void set_right_key(const char* value);
  inline void set_right_key(const void* value, size_t size);
  inline ::std::string* mutable_right_key();
  inline ::std::string* release_right_key();
  inline void set_allocated_right_key(::std::string* right_key);

  // @@protoc_insertion_point(class_scope:cockroach.proto.RangeTreeNode)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_black();
  inline void clear_has_black();
  inline void set_has_parent_key();
  inline void clear_has_parent_key();
  inline void set_has_left_key();
  inline void clear_has_left_key();
  inline void set_has_right_key();
  inline void clear_has_right_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* parent_key_;
  ::std::string* left_key_;
  ::std::string* right_key_;
  bool black_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static RangeTreeNode* default_instance_;
};
// -------------------------------------------------------------------

class Addr : public ::google::protobuf::Message {
 public:
  Addr();
  virtual ~Addr();

  Addr(const Addr& from);

  inline Addr& operator=(const Addr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Addr& default_instance();

  void Swap(Addr* other);

  // implements Message ----------------------------------------------

  Addr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Addr& from);
  void MergeFrom(const Addr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string network = 1;
  inline bool has_network() const;
  inline void clear_network();
  static const int kNetworkFieldNumber = 1;
  inline const ::std::string& network() const;
  inline void set_network(const ::std::string& value);
  inline void set_network(const char* value);
  inline void set_network(const char* value, size_t size);
  inline ::std::string* mutable_network();
  inline ::std::string* release_network();
  inline void set_allocated_network(::std::string* network);

  // optional string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:cockroach.proto.Addr)
 private:
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* network_;
  ::std::string* address_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static Addr* default_instance_;
};
// -------------------------------------------------------------------

class StoreCapacity : public ::google::protobuf::Message {
 public:
  StoreCapacity();
  virtual ~StoreCapacity();

  StoreCapacity(const StoreCapacity& from);

  inline StoreCapacity& operator=(const StoreCapacity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreCapacity& default_instance();

  void Swap(StoreCapacity* other);

  // implements Message ----------------------------------------------

  StoreCapacity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreCapacity& from);
  void MergeFrom(const StoreCapacity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Capacity = 1;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 1;
  inline ::google::protobuf::int64 capacity() const;
  inline void set_capacity(::google::protobuf::int64 value);

  // optional int64 Available = 2;
  inline bool has_available() const;
  inline void clear_available();
  static const int kAvailableFieldNumber = 2;
  inline ::google::protobuf::int64 available() const;
  inline void set_available(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.StoreCapacity)
 private:
  inline void set_has_capacity();
  inline void clear_has_capacity();
  inline void set_has_available();
  inline void clear_has_available();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 capacity_;
  ::google::protobuf::int64 available_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static StoreCapacity* default_instance_;
};
// -------------------------------------------------------------------

class NodeDescriptor : public ::google::protobuf::Message {
 public:
  NodeDescriptor();
  virtual ~NodeDescriptor();

  NodeDescriptor(const NodeDescriptor& from);

  inline NodeDescriptor& operator=(const NodeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeDescriptor& default_instance();

  void Swap(NodeDescriptor* other);

  // implements Message ----------------------------------------------

  NodeDescriptor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeDescriptor& from);
  void MergeFrom(const NodeDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 node_id = 1;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);

  // optional .cockroach.proto.Addr address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::cockroach::proto::Addr& address() const;
  inline ::cockroach::proto::Addr* mutable_address();
  inline ::cockroach::proto::Addr* release_address();
  inline void set_allocated_address(::cockroach::proto::Addr* address);

  // optional .cockroach.proto.Attributes attrs = 3;
  inline bool has_attrs() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 3;
  inline const ::cockroach::proto::Attributes& attrs() const;
  inline ::cockroach::proto::Attributes* mutable_attrs();
  inline ::cockroach::proto::Attributes* release_attrs();
  inline void set_allocated_attrs(::cockroach::proto::Attributes* attrs);

  // @@protoc_insertion_point(class_scope:cockroach.proto.NodeDescriptor)
 private:
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_attrs();
  inline void clear_has_attrs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Addr* address_;
  ::cockroach::proto::Attributes* attrs_;
  ::google::protobuf::int32 node_id_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static NodeDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class StoreDescriptor : public ::google::protobuf::Message {
 public:
  StoreDescriptor();
  virtual ~StoreDescriptor();

  StoreDescriptor(const StoreDescriptor& from);

  inline StoreDescriptor& operator=(const StoreDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreDescriptor& default_instance();

  void Swap(StoreDescriptor* other);

  // implements Message ----------------------------------------------

  StoreDescriptor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreDescriptor& from);
  void MergeFrom(const StoreDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 store_id = 1;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // optional .cockroach.proto.Attributes attrs = 2;
  inline bool has_attrs() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 2;
  inline const ::cockroach::proto::Attributes& attrs() const;
  inline ::cockroach::proto::Attributes* mutable_attrs();
  inline ::cockroach::proto::Attributes* release_attrs();
  inline void set_allocated_attrs(::cockroach::proto::Attributes* attrs);

  // optional .cockroach.proto.NodeDescriptor node = 3;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 3;
  inline const ::cockroach::proto::NodeDescriptor& node() const;
  inline ::cockroach::proto::NodeDescriptor* mutable_node();
  inline ::cockroach::proto::NodeDescriptor* release_node();
  inline void set_allocated_node(::cockroach::proto::NodeDescriptor* node);

  // optional .cockroach.proto.StoreCapacity capacity = 4;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 4;
  inline const ::cockroach::proto::StoreCapacity& capacity() const;
  inline ::cockroach::proto::StoreCapacity* mutable_capacity();
  inline ::cockroach::proto::StoreCapacity* release_capacity();
  inline void set_allocated_capacity(::cockroach::proto::StoreCapacity* capacity);

  // @@protoc_insertion_point(class_scope:cockroach.proto.StoreDescriptor)
 private:
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_attrs();
  inline void clear_has_attrs();
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_capacity();
  inline void clear_has_capacity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Attributes* attrs_;
  ::cockroach::proto::NodeDescriptor* node_;
  ::cockroach::proto::StoreCapacity* capacity_;
  ::google::protobuf::int32 store_id_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static StoreDescriptor* default_instance_;
};
// ===================================================================


// ===================================================================

// Attributes

// repeated string attrs = 1;
inline int Attributes::attrs_size() const {
  return attrs_.size();
}
inline void Attributes::clear_attrs() {
  attrs_.Clear();
}
inline const ::std::string& Attributes::attrs(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Attributes.attrs)
  return attrs_.Get(index);
}
inline ::std::string* Attributes::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Attributes.attrs)
  return attrs_.Mutable(index);
}
inline void Attributes::set_attrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.proto.Attributes.attrs)
  attrs_.Mutable(index)->assign(value);
}
inline void Attributes::set_attrs(int index, const char* value) {
  attrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Attributes.attrs)
}
inline void Attributes::set_attrs(int index, const char* value, size_t size) {
  attrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Attributes.attrs)
}
inline ::std::string* Attributes::add_attrs() {
  return attrs_.Add();
}
inline void Attributes::add_attrs(const ::std::string& value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.proto.Attributes.attrs)
}
inline void Attributes::add_attrs(const char* value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.proto.Attributes.attrs)
}
inline void Attributes::add_attrs(const char* value, size_t size) {
  attrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.proto.Attributes.attrs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Attributes::attrs() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.Attributes.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Attributes::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.Attributes.attrs)
  return &attrs_;
}

// -------------------------------------------------------------------

// Replica

// optional int32 node_id = 1;
inline bool Replica::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Replica::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Replica::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Replica::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 Replica::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Replica.node_id)
  return node_id_;
}
inline void Replica::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Replica.node_id)
}

// optional int32 store_id = 2;
inline bool Replica::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Replica::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Replica::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Replica::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 Replica::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Replica.store_id)
  return store_id_;
}
inline void Replica::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Replica.store_id)
}

// optional .cockroach.proto.Attributes attrs = 3;
inline bool Replica::has_attrs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Replica::set_has_attrs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Replica::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Replica::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::proto::Attributes::Clear();
  clear_has_attrs();
}
inline const ::cockroach::proto::Attributes& Replica::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Replica.attrs)
  return attrs_ != NULL ? *attrs_ : *default_instance_->attrs_;
}
inline ::cockroach::proto::Attributes* Replica::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) attrs_ = new ::cockroach::proto::Attributes;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Replica.attrs)
  return attrs_;
}
inline ::cockroach::proto::Attributes* Replica::release_attrs() {
  clear_has_attrs();
  ::cockroach::proto::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
inline void Replica::set_allocated_attrs(::cockroach::proto::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Replica.attrs)
}

// -------------------------------------------------------------------

// RangeDescriptor

// optional int64 raft_id = 1;
inline bool RangeDescriptor::has_raft_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeDescriptor::set_has_raft_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeDescriptor::clear_has_raft_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeDescriptor::clear_raft_id() {
  raft_id_ = GOOGLE_LONGLONG(0);
  clear_has_raft_id();
}
inline ::google::protobuf::int64 RangeDescriptor::raft_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeDescriptor.raft_id)
  return raft_id_;
}
inline void RangeDescriptor::set_raft_id(::google::protobuf::int64 value) {
  set_has_raft_id();
  raft_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeDescriptor.raft_id)
}

// optional bytes start_key = 2;
inline bool RangeDescriptor::has_start_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeDescriptor::set_has_start_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeDescriptor::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeDescriptor::clear_start_key() {
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_->clear();
  }
  clear_has_start_key();
}
inline const ::std::string& RangeDescriptor::start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeDescriptor.start_key)
  return *start_key_;
}
inline void RangeDescriptor::set_start_key(const ::std::string& value) {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  start_key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeDescriptor.start_key)
}
inline void RangeDescriptor::set_start_key(const char* value) {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  start_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeDescriptor.start_key)
}
inline void RangeDescriptor::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  start_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeDescriptor.start_key)
}
inline ::std::string* RangeDescriptor::mutable_start_key() {
  set_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeDescriptor.start_key)
  return start_key_;
}
inline ::std::string* RangeDescriptor::release_start_key() {
  clear_has_start_key();
  if (start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_key_;
    start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeDescriptor::set_allocated_start_key(::std::string* start_key) {
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_key_;
  }
  if (start_key) {
    set_has_start_key();
    start_key_ = start_key;
  } else {
    clear_has_start_key();
    start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeDescriptor.start_key)
}

// optional bytes end_key = 3;
inline bool RangeDescriptor::has_end_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeDescriptor::set_has_end_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RangeDescriptor::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RangeDescriptor::clear_end_key() {
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_->clear();
  }
  clear_has_end_key();
}
inline const ::std::string& RangeDescriptor::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeDescriptor.end_key)
  return *end_key_;
}
inline void RangeDescriptor::set_end_key(const ::std::string& value) {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  end_key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeDescriptor.end_key)
}
inline void RangeDescriptor::set_end_key(const char* value) {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  end_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeDescriptor.end_key)
}
inline void RangeDescriptor::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  end_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeDescriptor.end_key)
}
inline ::std::string* RangeDescriptor::mutable_end_key() {
  set_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    end_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeDescriptor.end_key)
  return end_key_;
}
inline ::std::string* RangeDescriptor::release_end_key() {
  clear_has_end_key();
  if (end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = end_key_;
    end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeDescriptor::set_allocated_end_key(::std::string* end_key) {
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_key_;
  }
  if (end_key) {
    set_has_end_key();
    end_key_ = end_key;
  } else {
    clear_has_end_key();
    end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeDescriptor.end_key)
}

// repeated .cockroach.proto.Replica replicas = 4;
inline int RangeDescriptor::replicas_size() const {
  return replicas_.size();
}
inline void RangeDescriptor::clear_replicas() {
  replicas_.Clear();
}
inline const ::cockroach::proto::Replica& RangeDescriptor::replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeDescriptor.replicas)
  return replicas_.Get(index);
}
inline ::cockroach::proto::Replica* RangeDescriptor::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeDescriptor.replicas)
  return replicas_.Mutable(index);
}
inline ::cockroach::proto::Replica* RangeDescriptor::add_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.proto.RangeDescriptor.replicas)
  return replicas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica >&
RangeDescriptor::replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.RangeDescriptor.replicas)
  return replicas_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica >*
RangeDescriptor::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.RangeDescriptor.replicas)
  return &replicas_;
}

// -------------------------------------------------------------------

// GCPolicy

// optional int32 ttl_seconds = 1;
inline bool GCPolicy::has_ttl_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCPolicy::set_has_ttl_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCPolicy::clear_has_ttl_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCPolicy::clear_ttl_seconds() {
  ttl_seconds_ = 0;
  clear_has_ttl_seconds();
}
inline ::google::protobuf::int32 GCPolicy::ttl_seconds() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GCPolicy.ttl_seconds)
  return ttl_seconds_;
}
inline void GCPolicy::set_ttl_seconds(::google::protobuf::int32 value) {
  set_has_ttl_seconds();
  ttl_seconds_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.GCPolicy.ttl_seconds)
}

// -------------------------------------------------------------------

// AcctConfig

// optional string cluster_id = 1;
inline bool AcctConfig::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcctConfig::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcctConfig::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcctConfig::clear_cluster_id() {
  if (cluster_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_->clear();
  }
  clear_has_cluster_id();
}
inline const ::std::string& AcctConfig::cluster_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.AcctConfig.cluster_id)
  return *cluster_id_;
}
inline void AcctConfig::set_cluster_id(const ::std::string& value) {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  cluster_id_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.AcctConfig.cluster_id)
}
inline void AcctConfig::set_cluster_id(const char* value) {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  cluster_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.AcctConfig.cluster_id)
}
inline void AcctConfig::set_cluster_id(const char* value, size_t size) {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  cluster_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.AcctConfig.cluster_id)
}
inline ::std::string* AcctConfig::mutable_cluster_id() {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.AcctConfig.cluster_id)
  return cluster_id_;
}
inline ::std::string* AcctConfig::release_cluster_id() {
  clear_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cluster_id_;
    cluster_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcctConfig::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_id_;
  }
  if (cluster_id) {
    set_has_cluster_id();
    cluster_id_ = cluster_id;
  } else {
    clear_has_cluster_id();
    cluster_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.AcctConfig.cluster_id)
}

// -------------------------------------------------------------------

// PermConfig

// repeated string read = 1;
inline int PermConfig::read_size() const {
  return read_.size();
}
inline void PermConfig::clear_read() {
  read_.Clear();
}
inline const ::std::string& PermConfig::read(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PermConfig.read)
  return read_.Get(index);
}
inline ::std::string* PermConfig::mutable_read(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PermConfig.read)
  return read_.Mutable(index);
}
inline void PermConfig::set_read(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.proto.PermConfig.read)
  read_.Mutable(index)->assign(value);
}
inline void PermConfig::set_read(int index, const char* value) {
  read_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.PermConfig.read)
}
inline void PermConfig::set_read(int index, const char* value, size_t size) {
  read_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.PermConfig.read)
}
inline ::std::string* PermConfig::add_read() {
  return read_.Add();
}
inline void PermConfig::add_read(const ::std::string& value) {
  read_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.proto.PermConfig.read)
}
inline void PermConfig::add_read(const char* value) {
  read_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.proto.PermConfig.read)
}
inline void PermConfig::add_read(const char* value, size_t size) {
  read_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.proto.PermConfig.read)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PermConfig::read() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.PermConfig.read)
  return read_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PermConfig::mutable_read() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.PermConfig.read)
  return &read_;
}

// repeated string write = 2;
inline int PermConfig::write_size() const {
  return write_.size();
}
inline void PermConfig::clear_write() {
  write_.Clear();
}
inline const ::std::string& PermConfig::write(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PermConfig.write)
  return write_.Get(index);
}
inline ::std::string* PermConfig::mutable_write(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PermConfig.write)
  return write_.Mutable(index);
}
inline void PermConfig::set_write(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.proto.PermConfig.write)
  write_.Mutable(index)->assign(value);
}
inline void PermConfig::set_write(int index, const char* value) {
  write_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.PermConfig.write)
}
inline void PermConfig::set_write(int index, const char* value, size_t size) {
  write_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.PermConfig.write)
}
inline ::std::string* PermConfig::add_write() {
  return write_.Add();
}
inline void PermConfig::add_write(const ::std::string& value) {
  write_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.proto.PermConfig.write)
}
inline void PermConfig::add_write(const char* value) {
  write_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.proto.PermConfig.write)
}
inline void PermConfig::add_write(const char* value, size_t size) {
  write_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.proto.PermConfig.write)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PermConfig::write() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.PermConfig.write)
  return write_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PermConfig::mutable_write() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.PermConfig.write)
  return &write_;
}

// -------------------------------------------------------------------

// ZoneConfig

// repeated .cockroach.proto.Attributes replica_attrs = 1;
inline int ZoneConfig::replica_attrs_size() const {
  return replica_attrs_.size();
}
inline void ZoneConfig::clear_replica_attrs() {
  replica_attrs_.Clear();
}
inline const ::cockroach::proto::Attributes& ZoneConfig::replica_attrs(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ZoneConfig.replica_attrs)
  return replica_attrs_.Get(index);
}
inline ::cockroach::proto::Attributes* ZoneConfig::mutable_replica_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ZoneConfig.replica_attrs)
  return replica_attrs_.Mutable(index);
}
inline ::cockroach::proto::Attributes* ZoneConfig::add_replica_attrs() {
  // @@protoc_insertion_point(field_add:cockroach.proto.ZoneConfig.replica_attrs)
  return replica_attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Attributes >&
ZoneConfig::replica_attrs() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.ZoneConfig.replica_attrs)
  return replica_attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Attributes >*
ZoneConfig::mutable_replica_attrs() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.ZoneConfig.replica_attrs)
  return &replica_attrs_;
}

// optional int64 range_min_bytes = 2;
inline bool ZoneConfig::has_range_min_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneConfig::set_has_range_min_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneConfig::clear_has_range_min_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneConfig::clear_range_min_bytes() {
  range_min_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_range_min_bytes();
}
inline ::google::protobuf::int64 ZoneConfig::range_min_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ZoneConfig.range_min_bytes)
  return range_min_bytes_;
}
inline void ZoneConfig::set_range_min_bytes(::google::protobuf::int64 value) {
  set_has_range_min_bytes();
  range_min_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.ZoneConfig.range_min_bytes)
}

// optional int64 range_max_bytes = 3;
inline bool ZoneConfig::has_range_max_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneConfig::set_has_range_max_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneConfig::clear_has_range_max_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneConfig::clear_range_max_bytes() {
  range_max_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_range_max_bytes();
}
inline ::google::protobuf::int64 ZoneConfig::range_max_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ZoneConfig.range_max_bytes)
  return range_max_bytes_;
}
inline void ZoneConfig::set_range_max_bytes(::google::protobuf::int64 value) {
  set_has_range_max_bytes();
  range_max_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.ZoneConfig.range_max_bytes)
}

// optional .cockroach.proto.GCPolicy gc = 4;
inline bool ZoneConfig::has_gc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZoneConfig::set_has_gc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZoneConfig::clear_has_gc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZoneConfig::clear_gc() {
  if (gc_ != NULL) gc_->::cockroach::proto::GCPolicy::Clear();
  clear_has_gc();
}
inline const ::cockroach::proto::GCPolicy& ZoneConfig::gc() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ZoneConfig.gc)
  return gc_ != NULL ? *gc_ : *default_instance_->gc_;
}
inline ::cockroach::proto::GCPolicy* ZoneConfig::mutable_gc() {
  set_has_gc();
  if (gc_ == NULL) gc_ = new ::cockroach::proto::GCPolicy;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ZoneConfig.gc)
  return gc_;
}
inline ::cockroach::proto::GCPolicy* ZoneConfig::release_gc() {
  clear_has_gc();
  ::cockroach::proto::GCPolicy* temp = gc_;
  gc_ = NULL;
  return temp;
}
inline void ZoneConfig::set_allocated_gc(::cockroach::proto::GCPolicy* gc) {
  delete gc_;
  gc_ = gc;
  if (gc) {
    set_has_gc();
  } else {
    clear_has_gc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ZoneConfig.gc)
}

// -------------------------------------------------------------------

// RangeTree

// optional bytes root_key = 1;
inline bool RangeTree::has_root_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeTree::set_has_root_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeTree::clear_has_root_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeTree::clear_root_key() {
  if (root_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_key_->clear();
  }
  clear_has_root_key();
}
inline const ::std::string& RangeTree::root_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTree.root_key)
  return *root_key_;
}
inline void RangeTree::set_root_key(const ::std::string& value) {
  set_has_root_key();
  if (root_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_key_ = new ::std::string;
  }
  root_key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTree.root_key)
}
inline void RangeTree::set_root_key(const char* value) {
  set_has_root_key();
  if (root_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_key_ = new ::std::string;
  }
  root_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeTree.root_key)
}
inline void RangeTree::set_root_key(const void* value, size_t size) {
  set_has_root_key();
  if (root_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_key_ = new ::std::string;
  }
  root_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeTree.root_key)
}
inline ::std::string* RangeTree::mutable_root_key() {
  set_has_root_key();
  if (root_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeTree.root_key)
  return root_key_;
}
inline ::std::string* RangeTree::release_root_key() {
  clear_has_root_key();
  if (root_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = root_key_;
    root_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeTree::set_allocated_root_key(::std::string* root_key) {
  if (root_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_key_;
  }
  if (root_key) {
    set_has_root_key();
    root_key_ = root_key;
  } else {
    clear_has_root_key();
    root_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeTree.root_key)
}

// -------------------------------------------------------------------

// RangeTreeNode

// optional bytes key = 1;
inline bool RangeTreeNode::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeTreeNode::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeTreeNode::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeTreeNode::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& RangeTreeNode::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTreeNode.key)
  return *key_;
}
inline void RangeTreeNode::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTreeNode.key)
}
inline void RangeTreeNode::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeTreeNode.key)
}
inline void RangeTreeNode::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeTreeNode.key)
}
inline ::std::string* RangeTreeNode::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeTreeNode.key)
  return key_;
}
inline ::std::string* RangeTreeNode::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeTreeNode::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeTreeNode.key)
}

// optional bool black = 2;
inline bool RangeTreeNode::has_black() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeTreeNode::set_has_black() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeTreeNode::clear_has_black() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeTreeNode::clear_black() {
  black_ = false;
  clear_has_black();
}
inline bool RangeTreeNode::black() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTreeNode.black)
  return black_;
}
inline void RangeTreeNode::set_black(bool value) {
  set_has_black();
  black_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTreeNode.black)
}

// optional bytes parent_key = 3;
inline bool RangeTreeNode::has_parent_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeTreeNode::set_has_parent_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RangeTreeNode::clear_has_parent_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RangeTreeNode::clear_parent_key() {
  if (parent_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parent_key_->clear();
  }
  clear_has_parent_key();
}
inline const ::std::string& RangeTreeNode::parent_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTreeNode.parent_key)
  return *parent_key_;
}
inline void RangeTreeNode::set_parent_key(const ::std::string& value) {
  set_has_parent_key();
  if (parent_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parent_key_ = new ::std::string;
  }
  parent_key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTreeNode.parent_key)
}
inline void RangeTreeNode::set_parent_key(const char* value) {
  set_has_parent_key();
  if (parent_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parent_key_ = new ::std::string;
  }
  parent_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeTreeNode.parent_key)
}
inline void RangeTreeNode::set_parent_key(const void* value, size_t size) {
  set_has_parent_key();
  if (parent_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parent_key_ = new ::std::string;
  }
  parent_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeTreeNode.parent_key)
}
inline ::std::string* RangeTreeNode::mutable_parent_key() {
  set_has_parent_key();
  if (parent_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parent_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeTreeNode.parent_key)
  return parent_key_;
}
inline ::std::string* RangeTreeNode::release_parent_key() {
  clear_has_parent_key();
  if (parent_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parent_key_;
    parent_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeTreeNode::set_allocated_parent_key(::std::string* parent_key) {
  if (parent_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parent_key_;
  }
  if (parent_key) {
    set_has_parent_key();
    parent_key_ = parent_key;
  } else {
    clear_has_parent_key();
    parent_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeTreeNode.parent_key)
}

// optional bytes left_key = 4;
inline bool RangeTreeNode::has_left_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RangeTreeNode::set_has_left_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RangeTreeNode::clear_has_left_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RangeTreeNode::clear_left_key() {
  if (left_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    left_key_->clear();
  }
  clear_has_left_key();
}
inline const ::std::string& RangeTreeNode::left_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTreeNode.left_key)
  return *left_key_;
}
inline void RangeTreeNode::set_left_key(const ::std::string& value) {
  set_has_left_key();
  if (left_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    left_key_ = new ::std::string;
  }
  left_key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTreeNode.left_key)
}
inline void RangeTreeNode::set_left_key(const char* value) {
  set_has_left_key();
  if (left_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    left_key_ = new ::std::string;
  }
  left_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeTreeNode.left_key)
}
inline void RangeTreeNode::set_left_key(const void* value, size_t size) {
  set_has_left_key();
  if (left_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    left_key_ = new ::std::string;
  }
  left_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeTreeNode.left_key)
}
inline ::std::string* RangeTreeNode::mutable_left_key() {
  set_has_left_key();
  if (left_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    left_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeTreeNode.left_key)
  return left_key_;
}
inline ::std::string* RangeTreeNode::release_left_key() {
  clear_has_left_key();
  if (left_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = left_key_;
    left_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeTreeNode::set_allocated_left_key(::std::string* left_key) {
  if (left_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete left_key_;
  }
  if (left_key) {
    set_has_left_key();
    left_key_ = left_key;
  } else {
    clear_has_left_key();
    left_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeTreeNode.left_key)
}

// optional bytes right_key = 5;
inline bool RangeTreeNode::has_right_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RangeTreeNode::set_has_right_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RangeTreeNode::clear_has_right_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RangeTreeNode::clear_right_key() {
  if (right_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    right_key_->clear();
  }
  clear_has_right_key();
}
inline const ::std::string& RangeTreeNode::right_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTreeNode.right_key)
  return *right_key_;
}
inline void RangeTreeNode::set_right_key(const ::std::string& value) {
  set_has_right_key();
  if (right_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    right_key_ = new ::std::string;
  }
  right_key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTreeNode.right_key)
}
inline void RangeTreeNode::set_right_key(const char* value) {
  set_has_right_key();
  if (right_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    right_key_ = new ::std::string;
  }
  right_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeTreeNode.right_key)
}
inline void RangeTreeNode::set_right_key(const void* value, size_t size) {
  set_has_right_key();
  if (right_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    right_key_ = new ::std::string;
  }
  right_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeTreeNode.right_key)
}
inline ::std::string* RangeTreeNode::mutable_right_key() {
  set_has_right_key();
  if (right_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    right_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeTreeNode.right_key)
  return right_key_;
}
inline ::std::string* RangeTreeNode::release_right_key() {
  clear_has_right_key();
  if (right_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = right_key_;
    right_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeTreeNode::set_allocated_right_key(::std::string* right_key) {
  if (right_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete right_key_;
  }
  if (right_key) {
    set_has_right_key();
    right_key_ = right_key;
  } else {
    clear_has_right_key();
    right_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeTreeNode.right_key)
}

// -------------------------------------------------------------------

// Addr

// optional string network = 1;
inline bool Addr::has_network() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Addr::set_has_network() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Addr::clear_has_network() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Addr::clear_network() {
  if (network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    network_->clear();
  }
  clear_has_network();
}
inline const ::std::string& Addr::network() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Addr.network)
  return *network_;
}
inline void Addr::set_network(const ::std::string& value) {
  set_has_network();
  if (network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    network_ = new ::std::string;
  }
  network_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.Addr.network)
}
inline void Addr::set_network(const char* value) {
  set_has_network();
  if (network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    network_ = new ::std::string;
  }
  network_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Addr.network)
}
inline void Addr::set_network(const char* value, size_t size) {
  set_has_network();
  if (network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    network_ = new ::std::string;
  }
  network_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Addr.network)
}
inline ::std::string* Addr::mutable_network() {
  set_has_network();
  if (network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    network_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Addr.network)
  return network_;
}
inline ::std::string* Addr::release_network() {
  clear_has_network();
  if (network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = network_;
    network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Addr::set_allocated_network(::std::string* network) {
  if (network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete network_;
  }
  if (network) {
    set_has_network();
    network_ = network;
  } else {
    clear_has_network();
    network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Addr.network)
}

// optional string address = 2;
inline bool Addr::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Addr::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Addr::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Addr::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& Addr::address() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Addr.address)
  return *address_;
}
inline void Addr::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.Addr.address)
}
inline void Addr::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Addr.address)
}
inline void Addr::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Addr.address)
}
inline ::std::string* Addr::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Addr.address)
  return address_;
}
inline ::std::string* Addr::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Addr::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Addr.address)
}

// -------------------------------------------------------------------

// StoreCapacity

// optional int64 Capacity = 1;
inline bool StoreCapacity::has_capacity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreCapacity::set_has_capacity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreCapacity::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreCapacity::clear_capacity() {
  capacity_ = GOOGLE_LONGLONG(0);
  clear_has_capacity();
}
inline ::google::protobuf::int64 StoreCapacity::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreCapacity.Capacity)
  return capacity_;
}
inline void StoreCapacity::set_capacity(::google::protobuf::int64 value) {
  set_has_capacity();
  capacity_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.StoreCapacity.Capacity)
}

// optional int64 Available = 2;
inline bool StoreCapacity::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreCapacity::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreCapacity::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreCapacity::clear_available() {
  available_ = GOOGLE_LONGLONG(0);
  clear_has_available();
}
inline ::google::protobuf::int64 StoreCapacity::available() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreCapacity.Available)
  return available_;
}
inline void StoreCapacity::set_available(::google::protobuf::int64 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.StoreCapacity.Available)
}

// -------------------------------------------------------------------

// NodeDescriptor

// optional int32 node_id = 1;
inline bool NodeDescriptor::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeDescriptor::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeDescriptor::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeDescriptor::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 NodeDescriptor::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.NodeDescriptor.node_id)
  return node_id_;
}
inline void NodeDescriptor::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.NodeDescriptor.node_id)
}

// optional .cockroach.proto.Addr address = 2;
inline bool NodeDescriptor::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeDescriptor::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeDescriptor::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeDescriptor::clear_address() {
  if (address_ != NULL) address_->::cockroach::proto::Addr::Clear();
  clear_has_address();
}
inline const ::cockroach::proto::Addr& NodeDescriptor::address() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.NodeDescriptor.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::cockroach::proto::Addr* NodeDescriptor::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::cockroach::proto::Addr;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.NodeDescriptor.address)
  return address_;
}
inline ::cockroach::proto::Addr* NodeDescriptor::release_address() {
  clear_has_address();
  ::cockroach::proto::Addr* temp = address_;
  address_ = NULL;
  return temp;
}
inline void NodeDescriptor::set_allocated_address(::cockroach::proto::Addr* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.NodeDescriptor.address)
}

// optional .cockroach.proto.Attributes attrs = 3;
inline bool NodeDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::proto::Attributes::Clear();
  clear_has_attrs();
}
inline const ::cockroach::proto::Attributes& NodeDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.NodeDescriptor.attrs)
  return attrs_ != NULL ? *attrs_ : *default_instance_->attrs_;
}
inline ::cockroach::proto::Attributes* NodeDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) attrs_ = new ::cockroach::proto::Attributes;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.NodeDescriptor.attrs)
  return attrs_;
}
inline ::cockroach::proto::Attributes* NodeDescriptor::release_attrs() {
  clear_has_attrs();
  ::cockroach::proto::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
inline void NodeDescriptor::set_allocated_attrs(::cockroach::proto::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.NodeDescriptor.attrs)
}

// -------------------------------------------------------------------

// StoreDescriptor

// optional int32 store_id = 1;
inline bool StoreDescriptor::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreDescriptor::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreDescriptor::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreDescriptor::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 StoreDescriptor::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreDescriptor.store_id)
  return store_id_;
}
inline void StoreDescriptor::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.StoreDescriptor.store_id)
}

// optional .cockroach.proto.Attributes attrs = 2;
inline bool StoreDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::proto::Attributes::Clear();
  clear_has_attrs();
}
inline const ::cockroach::proto::Attributes& StoreDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreDescriptor.attrs)
  return attrs_ != NULL ? *attrs_ : *default_instance_->attrs_;
}
inline ::cockroach::proto::Attributes* StoreDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) attrs_ = new ::cockroach::proto::Attributes;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.StoreDescriptor.attrs)
  return attrs_;
}
inline ::cockroach::proto::Attributes* StoreDescriptor::release_attrs() {
  clear_has_attrs();
  ::cockroach::proto::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
inline void StoreDescriptor::set_allocated_attrs(::cockroach::proto::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.StoreDescriptor.attrs)
}

// optional .cockroach.proto.NodeDescriptor node = 3;
inline bool StoreDescriptor::has_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreDescriptor::set_has_node() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreDescriptor::clear_has_node() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreDescriptor::clear_node() {
  if (node_ != NULL) node_->::cockroach::proto::NodeDescriptor::Clear();
  clear_has_node();
}
inline const ::cockroach::proto::NodeDescriptor& StoreDescriptor::node() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreDescriptor.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::cockroach::proto::NodeDescriptor* StoreDescriptor::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::cockroach::proto::NodeDescriptor;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.StoreDescriptor.node)
  return node_;
}
inline ::cockroach::proto::NodeDescriptor* StoreDescriptor::release_node() {
  clear_has_node();
  ::cockroach::proto::NodeDescriptor* temp = node_;
  node_ = NULL;
  return temp;
}
inline void StoreDescriptor::set_allocated_node(::cockroach::proto::NodeDescriptor* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.StoreDescriptor.node)
}

// optional .cockroach.proto.StoreCapacity capacity = 4;
inline bool StoreDescriptor::has_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreDescriptor::set_has_capacity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreDescriptor::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreDescriptor::clear_capacity() {
  if (capacity_ != NULL) capacity_->::cockroach::proto::StoreCapacity::Clear();
  clear_has_capacity();
}
inline const ::cockroach::proto::StoreCapacity& StoreDescriptor::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreDescriptor.capacity)
  return capacity_ != NULL ? *capacity_ : *default_instance_->capacity_;
}
inline ::cockroach::proto::StoreCapacity* StoreDescriptor::mutable_capacity() {
  set_has_capacity();
  if (capacity_ == NULL) capacity_ = new ::cockroach::proto::StoreCapacity;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.StoreDescriptor.capacity)
  return capacity_;
}
inline ::cockroach::proto::StoreCapacity* StoreDescriptor::release_capacity() {
  clear_has_capacity();
  ::cockroach::proto::StoreCapacity* temp = capacity_;
  capacity_ = NULL;
  return temp;
}
inline void StoreDescriptor::set_allocated_capacity(::cockroach::proto::StoreCapacity* capacity) {
  delete capacity_;
  capacity_ = capacity;
  if (capacity) {
    set_has_capacity();
  } else {
    clear_has_capacity();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.StoreDescriptor.capacity)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fproto_2fconfig_2eproto__INCLUDED
